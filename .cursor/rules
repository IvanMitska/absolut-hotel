# Cursor Rules для сайта отеля "Абсолют" Витязево

## Основные принципы разработки

- **Современный дизайн:** Создавай премиум UI с wow-эффектом, морской тематикой и роскошными элементами
- **Производительность превыше всего:** Каждое решение должно быть оптимизировано для скорости
- **Mobile-first:** Начинай с мобильной версии, затем адаптируй для десктопа
- **Accessibility:** Всегда соблюдай WCAG 2.1 AA стандарты
- **Анимации с умом:** Богатые, но не мешающие пользовательскому опыту

## Технический стек (СТРОГО СОБЛЮДАЙ)

### Основные технологии:
- React 18+ с TypeScript (обязательно типизация)
- Vite для сборки
- Tailwind CSS для стилизации
- Framer Motion для анимаций
- React Router v6 для навигации
- Zustand для состояния# Cursor Rules для сайта отеля "Абсолют" Витязево

## Основные принципы разработки

- **Современный дизайн:** Создавай премиум UI с wow-эффектом, морской тематикой и роскошными элементами
- **Производительность превыше всего:** Каждое решение должно быть оптимизировано для скорости
- **Mobile-first:** Начинай с мобильной версии, затем адаптируй для десктопа
- **Accessibility:** Всегда соблюдай WCAG 2.1 AA стандарты
- **Анимации с умом:** Богатые, но не мешающие пользовательскому опыту

## Технический стек (СТРОГО СОБЛЮДАЙ)

### Основные технологии:
- React 18+ с TypeScript (обязательно типизация)
- Vite для сборки
- Tailwind CSS для стилизации
- Framer Motion для анимаций
- React Router v6 для навигации
- Zustand для состояния
- React Hook Form + Zod для форм
- React Query для HTTP запросов

### UI библиотеки:
- Headless UI + Radix UI для компонентов
- Lucide React для иконок
- Swiper.js для слайдеров
- React Day Picker для календаря

### 3D и визуальные эффекты:
- Three.js + React Three Fiber
- Lottie для анимаций
- React Spring для параллакса

## Структура проекта

```
src/
├── components/
│   ├── ui/              # Базовые UI компоненты
│   ├── layout/          # Компоненты макета
│   ├── sections/        # Секции страниц
│   └── features/        # Бизнес-логика компонентов
├── pages/              # Страницы приложения
├── hooks/              # Кастомные хуки
├── store/              # Zustand стор
├── utils/              # Утилиты
├── types/              # TypeScript типы
├── constants/          # Константы
└── assets/             # Статические файлы
```

## Соглашения по коду

### TypeScript:
- Всегда используй строгую типизацию
- Создавай интерфейсы для всех пропсов компонентов
- Используй utility types (Pick, Omit, Partial)
- Именуй типы с суффиксом Type, интерфейсы без суффикса

### React компоненты:
- Используй функциональные компоненты с хуками
- Мемоизируй компоненты с React.memo где нужно
- Группируй логику в кастомные хуки
- Используй forwardRef для ref передачи

### Стилизация:
- Только Tailwind CSS классы
- Используй CSS переменные для брендинг цветов
- Группируй классы: layout → spacing → colors → effects
- Создавай переиспользуемые компоненты с вариантами

### Именование:
- Компоненты: PascalCase (HeroSection, BookingForm)
- Хуки: camelCase с префиксом use (useBooking, useAnimation)
- Файлы: kebab-case для страниц, PascalCase для компонентов
- Переменные и функции: camelCase

## Дизайн система

### Цветовая палитра:
```css
:root {
  --color-primary: #0A4F7C;
  --color-accent: #F4D03F;
  --color-secondary: #17A2B8;
  --color-neutral-50: #F8F9FA;
  --color-neutral-100: #E9ECEF;
  --color-neutral-600: #6C757D;
}
```

### Типографика:
- Заголовки: Inter или Montserrat
- Основной текст: Inter
- Декоративные элементы: Playfair Display

### Spacing:
- Базовая единица: 0.25rem (4px)
- Используй Tailwind spacing scale (4, 8, 12, 16, 20, 24...)

### Breakpoints:
- sm: 640px (мобильные)
- md: 768px (планшеты)
- lg: 1024px (десктопы)
- xl: 1280px (большие экраны)

## Анимации и интерактивность

### Framer Motion паттерны:
```jsx
// Появление элементов
const fadeInUp = {
  initial: { opacity: 0, y: 30 },
  animate: { opacity: 1, y: 0 },
  transition: { duration: 0.6, ease: "easeOut" }
}

// Hover эффекты
const hoverScale = {
  whileHover: { scale: 1.05 },
  whileTap: { scale: 0.95 }
}

// Stagger анимации для списков
const staggerContainer = {
  animate: {
    transition: {
      staggerChildren: 0.1
    }
  }
}
```

### Принципы анимаций:
- Используй easing функции: "easeOut", "easeInOut"
- Длительность: 0.3s для hover, 0.6s для появления
- Всегда добавляй prefers-reduced-motion
- Анимируй только transform и opacity для производительности

## Оптимизация производительности

### Обязательные практики:
- Lazy loading для всех изображений
- Code splitting по маршрутам
- Мемоизация тяжелых вычислений с useMemo
- Дебаунс для поиска и фильтров
- Виртуализация для длинных списков

### Изображения:
- WebP с fallback на JPG
- Responsive images с srcSet
- Blur placeholder для lazy loading
- Оптимальные размеры: mobile 768px, desktop 1920px

### Bundle оптимизация:
- Tree shaking неиспользуемого кода
- Динамические импорты для тяжелых библиотек
- Vendor chunks для кэширования

## Структура страниц

### Каждая страница должна включать:
1. SEO мета-теги (title, description, og:tags)
2. Structured data (JSON-LD)
3. Breadcrumbs навигацию
4. Loading states для всех данных
5. Error boundaries для обработки ошибок

### Главная страница секции:
- Hero с видео/слайдером фоном
- О нас с анимированными счетчиками
- Номера карousel с фильтрацией
- Услуги с иконками и hover эффектами
- Галерея masonry layout
- Отзывы автоматический слайдер
- Контакты с интерактивной картой

## Формы и валидация

### React Hook Form + Zod паттерн:
```tsx
const bookingSchema = z.object({
  checkIn: z.date(),
  checkOut: z.date(),
  guests: z.number().min(1).max(6),
  email: z.string().email(),
  phone: z.string().regex(/^[\+]?[1-9][\d]{0,15}$/)
})

type BookingForm = z.infer<typeof bookingSchema>
```

### UI состояния форм:
- Loading состояние с спиннером
- Success состояние с анимацией
- Error состояния с четкими сообщениями
- Валидация в реальном времени

## Accessibility требования

### Обязательные элементы:
- Семантические HTML теги
- Alt текст для всех изображений
- Aria-labels для интерактивных элементов
- Focus indicators для keyboard navigation
- Color contrast ratio 4.5:1 минимум
- Screen reader поддержка

### Keyboard navigation:
- Tab order логически правильный
- Escape закрывает модальные окна
- Enter активирует кнопки
- Arrow keys для слайдеров и каруселей

## SEO оптимизация

### Мета-теги для каждой страницы:
```tsx
<Helmet>
  <title>Отель Абсолют Витязево - Семейный отдых у моря</title>
  <meta name="description" content="Современный отель в Витязево с подогреваемым бассейном, детской комнатой и домашним питанием. Бронирование онлайн." />
  <meta property="og:title" content="Отель Абсолют Витязево" />
  <meta property="og:description" content="Семейный отдых у моря с детской комнатой" />
  <meta property="og:image" content="/og-image.jpg" />
  <meta property="og:type" content="website" />
</Helmet>
```

### Structured Data:
- Hotel schema markup
- Review schema для отзывов
- LocalBusiness для контактов

## Контент требования

### Тексты:
- Заголовки цепляющие и SEO-оптимизированные
- Описания номеров детальные с преимуществами
- Call-to-action четкие и мотивирующие
- Контактная информация полная и актуальная

### Изображения:
- Высокое качество (минимум 1920px для десктопа)
- Профессиональные фото номеров, территории, бассейна
- Фото детской комнаты и игровой площадки
- Фото еды и ресторана

## Тестирование

### Перед каждым коммитом:
- ESLint без ошибок
- TypeScript компиляция без ошибок
- Lighthouse score 95+ (Performance, Accessibility, SEO)
- Тестирование на мобильных устройствах
- Проверка всех анимаций

### Cross-browser тестирование:
- Chrome (последние 2 версии)
- Firefox (последние 2 версии)
- Safari (последние 2 версии)
- Edge (последние 2 версии)

## Запрещенные практики

### НЕ используй:
- Class components (только функциональные)
- Inline styles (только Tailwind классы)
- Any тип в TypeScript
- console.log в продакшене
- Неоптимизированные изображения
- Блокирующие анимации
- Сторонние CSS фреймворки кроме Tailwind

### НЕ забывай:
- Добавлять loading states
- Обрабатывать ошибки
- Тестировать на мобильных
- Оптимизировать изображения
- Добавлять alt теги
- Проверять accessibility

## Особенности для отеля "Абсолют"

### Акценты в дизайне:
- Морская тематика (синий, бирюзовый, золотой)
- Семейная направленность
- Уют и домашняя атмосфера
- Премиум качество сервиса

### Ключевые преимущества для выделения:
- Подогреваемый бассейн круглый сезон
- Детская комната с аниматором
- Домашнее питание
- Центральное расположение
- Первая береговая линия

### Call-to-action фразы:
- "Забронировать сейчас"
- "Узнать цены"
- "Выбрать номер"
- "Семейный отдых у моря"
- "Звоните прямо сейчас"

---

**ВАЖНО:** Всегда придерживайся этих правил. При любых сомнениях выбирай более производительное и современное решение. Цель - создать сайт, который впечатляет с первых секунд и конвертирует посетителей в гостей отеля.
- React Hook Form + Zod для форм
- React Query для HTTP запросов

### UI библиотеки:
- Headless UI + Radix UI для компонентов
- Lucide React для иконок
- Swiper.js для слайдеров
- React Day Picker для календаря

### 3D и визуальные эффекты:
- Three.js + React Three Fiber
- Lottie для анимаций
- React Spring для параллакса

## Структура проекта

```
src/
├── components/
│   ├── ui/              # Базовые UI компоненты
│   ├── layout/          # Компоненты макета
│   ├── sections/        # Секции страниц
│   └── features/        # Бизнес-логика компонентов
├── pages/              # Страницы приложения
├── hooks/              # Кастомные хуки
├── store/              # Zustand стор
├── utils/              # Утилиты
├── types/              # TypeScript типы
├── constants/          # Константы
└── assets/             # Статические файлы
```

## Соглашения по коду

### TypeScript:
- Всегда используй строгую типизацию
- Создавай интерфейсы для всех пропсов компонентов
- Используй utility types (Pick, Omit, Partial)
- Именуй типы с суффиксом Type, интерфейсы без суффикса

### React компоненты:
- Используй функциональные компоненты с хуками
- Мемоизируй компоненты с React.memo где нужно
- Группируй логику в кастомные хуки
- Используй forwardRef для ref передачи

### Стилизация:
- Только Tailwind CSS классы
- Используй CSS переменные для брендинг цветов
- Группируй классы: layout → spacing → colors → effects
- Создавай переиспользуемые компоненты с вариантами

### Именование:
- Компоненты: PascalCase (HeroSection, BookingForm)
- Хуки: camelCase с префиксом use (useBooking, useAnimation)
- Файлы: kebab-case для страниц, PascalCase для компонентов
- Переменные и функции: camelCase

## Дизайн система

### Цветовая палитра:
```css
:root {
  --color-primary: #0A4F7C;
  --color-accent: #F4D03F;
  --color-secondary: #17A2B8;
  --color-neutral-50: #F8F9FA;
  --color-neutral-100: #E9ECEF;
  --color-neutral-600: #6C757D;
}
```

### Типографика:
- Заголовки: Inter или Montserrat
- Основной текст: Inter
- Декоративные элементы: Playfair Display

### Spacing:
- Базовая единица: 0.25rem (4px)
- Используй Tailwind spacing scale (4, 8, 12, 16, 20, 24...)

### Breakpoints:
- sm: 640px (мобильные)
- md: 768px (планшеты)
- lg: 1024px (десктопы)
- xl: 1280px (большие экраны)

## Анимации и интерактивность

### Framer Motion паттерны:
```jsx
// Появление элементов
const fadeInUp = {
  initial: { opacity: 0, y: 30 },
  animate: { opacity: 1, y: 0 },
  transition: { duration: 0.6, ease: "easeOut" }
}

// Hover эффекты
const hoverScale = {
  whileHover: { scale: 1.05 },
  whileTap: { scale: 0.95 }
}

// Stagger анимации для списков
const staggerContainer = {
  animate: {
    transition: {
      staggerChildren: 0.1
    }
  }
}
```

### Принципы анимаций:
- Используй easing функции: "easeOut", "easeInOut"
- Длительность: 0.3s для hover, 0.6s для появления
- Всегда добавляй prefers-reduced-motion
- Анимируй только transform и opacity для производительности

## Оптимизация производительности

### Обязательные практики:
- Lazy loading для всех изображений
- Code splitting по маршрутам
- Мемоизация тяжелых вычислений с useMemo
- Дебаунс для поиска и фильтров
- Виртуализация для длинных списков

### Изображения:
- WebP с fallback на JPG
- Responsive images с srcSet
- Blur placeholder для lazy loading
- Оптимальные размеры: mobile 768px, desktop 1920px

### Bundle оптимизация:
- Tree shaking неиспользуемого кода
- Динамические импорты для тяжелых библиотек
- Vendor chunks для кэширования

## Структура страниц

### Каждая страница должна включать:
1. SEO мета-теги (title, description, og:tags)
2. Structured data (JSON-LD)
3. Breadcrumbs навигацию
4. Loading states для всех данных
5. Error boundaries для обработки ошибок

### Главная страница секции:
- Hero с видео/слайдером фоном
- О нас с анимированными счетчиками
- Номера карousel с фильтрацией
- Услуги с иконками и hover эффектами
- Галерея masonry layout
- Отзывы автоматический слайдер
- Контакты с интерактивной картой

## Формы и валидация

### React Hook Form + Zod паттерн:
```tsx
const bookingSchema = z.object({
  checkIn: z.date(),
  checkOut: z.date(),
  guests: z.number().min(1).max(6),
  email: z.string().email(),
  phone: z.string().regex(/^[\+]?[1-9][\d]{0,15}$/)
})

type BookingForm = z.infer<typeof bookingSchema>
```

### UI состояния форм:
- Loading состояние с спиннером
- Success состояние с анимацией
- Error состояния с четкими сообщениями
- Валидация в реальном времени

## Accessibility требования

### Обязательные элементы:
- Семантические HTML теги
- Alt текст для всех изображений
- Aria-labels для интерактивных элементов
- Focus indicators для keyboard navigation
- Color contrast ratio 4.5:1 минимум
- Screen reader поддержка

### Keyboard navigation:
- Tab order логически правильный
- Escape закрывает модальные окна
- Enter активирует кнопки
- Arrow keys для слайдеров и каруселей

## SEO оптимизация

### Мета-теги для каждой страницы:
```tsx
<Helmet>
  <title>Отель Абсолют Витязево - Семейный отдых у моря</title>
  <meta name="description" content="Современный отель в Витязево с подогреваемым бассейном, детской комнатой и домашним питанием. Бронирование онлайн." />
  <meta property="og:title" content="Отель Абсолют Витязево" />
  <meta property="og:description" content="Семейный отдых у моря с детской комнатой" />
  <meta property="og:image" content="/og-image.jpg" />
  <meta property="og:type" content="website" />
</Helmet>
```

### Structured Data:
- Hotel schema markup
- Review schema для отзывов
- LocalBusiness для контактов

## Контент требования

### Тексты:
- Заголовки цепляющие и SEO-оптимизированные
- Описания номеров детальные с преимуществами
- Call-to-action четкие и мотивирующие
- Контактная информация полная и актуальная

### Изображения:
- Высокое качество (минимум 1920px для десктопа)
- Профессиональные фото номеров, территории, бассейна
- Фото детской комнаты и игровой площадки
- Фото еды и ресторана

## Тестирование

### Перед каждым коммитом:
- ESLint без ошибок
- TypeScript компиляция без ошибок
- Lighthouse score 95+ (Performance, Accessibility, SEO)
- Тестирование на мобильных устройствах
- Проверка всех анимаций

### Cross-browser тестирование:
- Chrome (последние 2 версии)
- Firefox (последние 2 версии)
- Safari (последние 2 версии)
- Edge (последние 2 версии)

## Запрещенные практики

### НЕ используй:
- Class components (только функциональные)
- Inline styles (только Tailwind классы)
- Any тип в TypeScript
- console.log в продакшене
- Неоптимизированные изображения
- Блокирующие анимации
- Сторонние CSS фреймворки кроме Tailwind

### НЕ забывай:
- Добавлять loading states
- Обрабатывать ошибки
- Тестировать на мобильных
- Оптимизировать изображения
- Добавлять alt теги
- Проверять accessibility

## Особенности для отеля "Абсолют"

### Акценты в дизайне:
- Морская тематика (синий, бирюзовый, золотой)
- Семейная направленность
- Уют и домашняя атмосфера
- Премиум качество сервиса

### Ключевые преимущества для выделения:
- Подогреваемый бассейн круглый сезон
- Детская комната с аниматором
- Домашнее питание
- Центральное расположение
- Первая береговая линия

### Call-to-action фразы:
- "Забронировать сейчас"
- "Узнать цены"
- "Выбрать номер"
- "Семейный отдых у моря"
- "Звоните прямо сейчас"

---
**ВАЖНО:** Всегда придерживайся этих правил. При любых сомнениях выбирай более производительное и современное решение. Цель - создать сайт, который впечатляет с первых секунд и конвертирует посетителей в гостей отеля.